import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Parameters
ticker = "^NSEI"  # NIFTY 50 Index
period = "5y"
num_simulations = 5000
num_days = 252

# Step 1: Download historical data
data = yf.download(ticker, period=period)
data.dropna(inplace=True)

# Step 2: Calculate daily returns
data['Daily Return'] = data['Close'].pct_change()
daily_returns = data['Daily Return'].dropna()

# Step 3: Get last closing price
last_price = float(data['Close'].iloc[-1])

# Step 4: Monte Carlo Simulations
simulated_prices = np.zeros((num_days, num_simulations))

for i in range(num_simulations):
    simulated_returns = np.random.normal(
        loc=daily_returns.mean(),
        scale=daily_returns.std(),
        size=num_days
    )
    price_series = last_price * np.cumprod(1 + simulated_returns)
    simulated_prices[:, i] = price_series

# Step 5: Statistics & Confidence Intervals
average_path = simulated_prices.mean(axis=1)
percentile_5 = np.percentile(simulated_prices, 5, axis=1)
percentile_95 = np.percentile(simulated_prices, 95, axis=1)
expected_return = (average_path[-1] - last_price) / last_price * 100
expected_std = np.std(simulated_prices[-1])

# Step 6: Plot Simulations
plt.figure(figsize=(12, 6))
plt.plot(simulated_prices, color='grey', alpha=0.2, linewidth=0.8)
plt.plot(average_path, color='blue', label='Average Simulation')
plt.plot(percentile_5, color='red', linestyle='--', label='5th Percentile (Worst Case)')
plt.plot(percentile_95, color='green', linestyle='--', label='95th Percentile (Best Case)')
plt.fill_between(range(num_days), percentile_5, percentile_95, color='lightblue', alpha=0.3)

plt.title(f"{ticker} Monte Carlo Simulation ({num_simulations} simulations, {num_days} days)")
plt.xlabel("Days")
plt.ylabel("Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 7: Histogram of Ending Prices
ending_prices = simulated_prices[-1]
plt.figure(figsize=(10, 5))
plt.hist(ending_prices, bins=20, color='skyblue', edgecolor='black')
plt.axvline(np.percentile(ending_prices, 5), color='red', linestyle='--', label='5% VaR')
plt.axvline(np.mean(ending_prices), color='blue', linestyle='--', label='Expected Price')
plt.title(f"Distribution of Simulated Ending Prices ({num_simulations} simulations)")
plt.xlabel("Price after 1 year")
plt.ylabel("Frequency")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 8: Value at Risk (VaR)
VaR_95 = last_price - np.percentile(ending_prices, 5)

# Creating the table with results
results = {
    'Metric': [
        'Expected Price',
        'Expected Return (%)',
        'Expected Std Dev (Volatility)',
        '5% Confidence Interval (Worst Case)',
        '95% Confidence Interval (Best Case)',
        'Value at Risk (VaR 95%)'
    ],
    'Value': [
        f"₹{average_path[-1]:.2f}",
        f"{expected_return:.2f}%",
        f"₹{expected_std:.2f}",
        f"₹{percentile_5[-1]:.2f}",
        f"₹{percentile_95[-1]:.2f}",
        f"₹{VaR_95:.2f}"
    ]
}

# Converting to DataFrame for a neat table
results_df = pd.DataFrame(results)

# Displaying the table
print("\nMonte Carlo Simulation Results:")
print(results_df)
